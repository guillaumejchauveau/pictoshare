# Testing and DMZ (DeMilitarized Zone) workflow implementation.
# The DMZ workflow adds an intermediate branch, dmz, that developers use to merge their work (instead of master). If the merge results in breaking the tests, master will still contain working code, as it always should. The problems can be solved on dmz, and only when dmz is working again, its contents are automatically merged in master.
# Like this, master is always the latest working code.
name: Main
on:
  push:
    branches: 
      - master
      - dmz
  pull_request:

jobs:
  test:
    if: startsWith(github.head_ref, 'experiment/') == false
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        test-config:
          - { scheme: PicToShareTests, destination: platform=macOS }
          - { scheme: PicToShareUITests, destination: platform=macOS }
    env:
      XCODE_PATH: /Applications/Xcode_12.2.app
    steps:
      - uses: actions/checkout@v2
      - run: |
          sudo xcode-select -s $XCODE_PATH
          xcode-select -p
      - run: set -o pipefail && xcodebuild test -scheme '${{ matrix.test-config.scheme }}' -destination '${{ matrix.test-config.destination }}' | xcpretty

  # DMZ job for automatic merging of the dmz branch on master.
  dmz:
    # Only runs on a push (or merge) on dmz.
    if: github.event_name == 'push' && github.ref == 'refs/heads/dmz'
    # The tests must pass in order to keep master working.
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: get_commit_message
        run: echo "::set-output name=MESSAGE::$(git log --format=%B -n 1 ${{github.sha}})"
      # GitHub API call for merge.
      - uses: octokit/request-action@v2.x
        id: merge_dmz_in_master
        with:
          route: POST /repos/${{github.repository}}/merges
          base: master
          head: ${{github.sha}}
          commit_message: ${{steps.get_commit_message.outputs.MESSAGE}}
        env:
          GITHUB_TOKEN: ${{github.token}}
      - if: steps.merge_dmz_in_master.outputs.status != 201 && steps.merge_dmz_in_master.outputs.status != 204
        run: echo "::error::Merge failed" && exit 1
      # GitHub API call to add a successfull check on master.
      - if: steps.merge_dmz_in_master.outputs.status == 201
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{github.repository}}/check-runs
          name: DMZ merge
          head_sha: ${{fromJSON(steps.merge_dmz_in_master.outputs.data).sha}}
          status: completed
          conclusion: success
        env:
          GITHUB_TOKEN: ${{github.token}}
